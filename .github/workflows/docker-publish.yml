name: Publish Docker Image to DEV

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  REGISTRY: harbor.fabrice.local
  HARBOR_PROJECT: dev
  IMAGE_NAME: simple-todo-list

jobs:

  # Lint the Dockerfile
  lint:
    runs-on: [self-hosted, Linux, X64]
    steps: 
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Running dockerfilelint
      uses: luke142367/Docker-Lint-Action@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TARGET: Dockerfile

    - name: Running hadolint
      uses: brpaz/hadolint-action@master
      with:
        dockerfile: "Dockerfile"

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: [self-hosted, Linux, X64]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: [test, lint]

    runs-on: [self-hosted, Linux, X64]
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Applying npm versioning depending on git tag
        run: |
          echo "REF: ${{ github.ref }}, COMMIT: ${{ github.sha }} "

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          if [ "$VERSION" != "master" ]; then
            sed -i "s/\"version\"\: \".*\"/\"version\"\: \"$VERSION\"/" package.json
          fi

          echo "package.json:"
          cat package.json

      - name: Build docker image
        run: docker build . --no-cache --file Dockerfile --tag $IMAGE_NAME --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') --build-arg COMMIT=${{ github.sha }}

      - name: Log into registry
        run: echo "${{ secrets.DEV_REGISTRY_ROBOT_PASSWORD }}" | docker login $REGISTRY -u '${{ secrets.DEV_REGISTRY_ROBOT_USER }}' --password-stdin

      - name: Tag and push image
        run: |
          IMAGE_ID=$REGISTRY/$HARBOR_PROJECT/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
